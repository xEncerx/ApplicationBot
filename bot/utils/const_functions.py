from bot.data.application_model import ApplicationModel

from aiogram.types import FSInputFile, URLInputFile
from typing import Optional, BinaryIO, Union
from httpx import AsyncClient
import os

class FileUploader:
	"""
	–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫ gofile.io
	–ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –†–§ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ vpn|proxy
	–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ:
	https://api.gofile.io/servers
	"""
	_SERVER = "store1"

	def __init__(self):
		self.session = AsyncClient()

	# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
	async def upload(self, file: BinaryIO) -> Optional[str]:
		_url = f"https://{self._SERVER}.gofile.io/contents/uploadfile"
		files = {"file": file}

		response = await self.session.post(_url, files=files)
		if response.status_code != 200: return

		_json = response.json()
		return _json["data"]["downloadPage"]


class ApplicationType:
	def __init__(self, application_data: dict, state: int):
		self.text = application_data.get("text")
		self.file_id = application_data.get("file_id")
		self.file_type = application_data.get("file_type")
		self.waiting_data = application_data.get("waiting_data")

		self.state = state

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ
class _ApplicationData:
	def __init__(self):
		self._data = {
			# user_id: question state
		}
		self._max_state = len(ApplicationModel.items())

	# –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫–∞ –æ –∑–∞—è–≤–∫–µ
	async def update(self, user_id: int, state: int = 1) -> None:
		if state <= self._max_state:
			self._data.update({user_id: state})

	# –£–¥–∞–ª—è–µ–º —á–µ–ª–æ–≤–µ–∫–∞
	async def delete(self, user_id: int) -> None:
		if self._data.get(user_id):
			del self._data[user_id]

	# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–ø—Ä–æ—Å–µ
	async def load(self, user_id: int) -> Optional[ApplicationType]:
		state = self._data.get(user_id)
		if not state:
			await self.update(user_id)

		if state-1 == self._max_state:
			return

		data = ApplicationModel.get(f"question_{state}")
		return ApplicationType(data, state)

	# –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
	async def next(self, user_id: int) -> None:
		if not self._data.get(user_id):
			await self.update(user_id)

		self._data[user_id] += 1

	# –ù–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
	@staticmethod
	async def get_text_by_answers(data: dict) -> str:
		text = ""
		for key, value in data.items():
			if isinstance(value, tuple):
				value = "üì• <i>–§–∞–π–ª –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.</i>"
			question_text = ApplicationModel[key]["text"]
			text += f"<b>{question_text}:</b> <i>{value}</i>\n"

		return text


# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω—É–∂–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞
def get_image(value: str) -> Union[FSInputFile, URLInputFile, str, None]:
	"""
	:param value: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É / —Å—Å—ã–ª–∫–∞ / file_id
	:return: FSInputFile / URLInputFile / file_id
	"""
	if os.path.exists(value):
		return FSInputFile(value)
	elif value.startswith("http"):
		return URLInputFile(value)
	elif value:
		return value
	return